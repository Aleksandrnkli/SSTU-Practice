package graphic;import java.awt.Container;import java.awt.EventQueue;import java.awt.Font;import java.awt.Graphics;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.logging.Level;import java.util.logging.Logger;import javax.swing.DefaultComboBoxModel;import javax.swing.GroupLayout;import javax.swing.GroupLayout.Alignment;import javax.swing.GroupLayout.ParallelGroup;import javax.swing.GroupLayout.SequentialGroup;import javax.swing.JButton;import javax.swing.JComboBox;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTextField;import javax.swing.LayoutStyle;import javax.swing.LayoutStyle.ComponentPlacement;import javax.swing.UIManager;import javax.swing.UIManager.LookAndFeelInfo;import javax.swing.UnsupportedLookAndFeelException;public class GraphicForm        extends JFrame {    double minY;    double minX;    double maxX;    double maxY;    double stepX;    double stepY;    int y = 4;    private JButton graphicButton;    private JComboBox<String> graphicComboBox;    private JPanel graphicPanel;    private JLabel jLabel1;    private JLabel maxXLabel;    private JTextField maxXText;    private JLabel maxYLabel;    private JTextField maxYText;    private JLabel minXLabel;    private JTextField minXText;    private JLabel minYLabel;    private JTextField minYText;    private JLabel stepLabel;    private JLabel stepXLabel;    private JTextField stepXText;    private JLabel stepYLabel;    private JTextField stepYText;    public GraphicForm() {        setTitle("Graphics builder");        initComponents();        visible(false);    }    private void setFirstLines(Graphics g) {        this.minXText.setText("-5");        this.minYText.setText("-2");        this.maxXText.setText("5");        this.maxYText.setText("7");        this.stepXText.setText("2");        this.stepYText.setText("1");        paintFirstLines(g);    }    private void paintFirstLines(Graphics g) {        try {            this.minY = Double.parseDouble(this.minYText.getText());            this.minX = Double.parseDouble(this.minXText.getText());            this.maxX = Double.parseDouble(this.maxXText.getText());            this.maxY = Double.parseDouble(this.maxYText.getText());            this.stepX = Double.parseDouble(this.stepXText.getText());            this.stepY = Double.parseDouble(this.stepYText.getText());        } catch (NumberFormatException ex) {            JOptionPane.showMessageDialog(null, "���� ��������� ����������� ��� ������������ ������������� ����");            return;        }        if ((this.maxX <= this.minX) || (this.maxY <= this.minY)) {            JOptionPane.showMessageDialog(null, "�������� ��������� ������ �����������");            return;        }        double mx = (this.graphicPanel.getWidth() - 0) / (this.maxX - this.minX);        double my = (this.graphicPanel.getHeight() - 0) / (this.maxY - this.minY);        g.drawLine(10, (int) (this.maxY * my) - 20, this.graphicPanel.getWidth() - 10, (int) (this.maxY * my) - 20);        g.drawString(">X", this.graphicPanel.getWidth() - 15, (int) (this.maxY * my) - 15);        g.drawLine(10 - (int) (this.minX * mx), 10, 10 - (int) (this.minX * mx), this.graphicPanel.getHeight() - 10);        g.drawString("^Y", 8 - (int) (this.minX * mx), 15);        g.drawLine(10, (int) ((this.maxY - this.y) * my) - 20, this.graphicPanel.getWidth() - 10, (int) ((this.maxY - this.y) * my) - 20);        g.drawString("y=4", this.graphicPanel.getWidth() - 25, (int) ((this.maxY - this.y) * my) - 23);        int xCol = (int) ((this.maxX - this.minX) / this.stepX);        int yCol = (int) ((this.maxY - this.minY) / this.stepY);        if (xCol > 10) {            int k = 1;            for (double i = this.minX; i <= this.maxX; i += this.stepX) {                if (k % 2 == 0) {                    k++;                } else {                    g.drawLine(10 + (int) ((i - this.minX) * mx), (int) (this.maxY * my) - 25, 10 + (int) ((i - this.minX) * mx), (int) (this.maxY * my) - 15);                    String num = String.format("%.1f", new Object[]{Double.valueOf(i)});                    if (i != 0.0D) {                        g.drawString(num, 3 + (int) ((i - this.minX) * mx), (int) (this.maxY * my) + 5);                    }                    k++;                }            }        }        for (double i = this.minX; i <= this.maxX; i += this.stepX) {            g.drawLine(10 + (int) ((i - this.minX) * mx), (int) (this.maxY * my) - 25, 10 + (int) ((i - this.minX) * mx), (int) (this.maxY * my) - 15);            String num = String.format("%.1f", new Object[]{Double.valueOf(i)});            if (i != 0.0D) {                g.drawString(num, 3 + (int) ((i - this.minX) * mx), (int) (this.maxY * my) + 5);            }        }        if (yCol > 10) {            int k = 1;            for (double i = this.minY; i <= this.maxY; i += this.stepY) {                if (k % 2 == 0) {                    k++;                } else if (i != 0.0D) {                    g.drawLine(10 - (int) (this.minX * mx) - 5, (int) ((this.maxY - i) * my) - 20, 10 - (int) (this.minX * mx) + 5, (int) ((this.maxY - i) * my) - 20);                    String num = String.format("%.1f", new Object[]{Double.valueOf(i)});                    g.drawString(num, 10 - (int) (this.minX * mx) - 25, (int) ((this.maxY - i) * my) - 15);                    k++;                }            }        }        for (double i = this.minY; i <= this.maxY; i += this.stepY) {            if (i != 0.0D) {                g.drawLine(10 - (int) (this.minX * mx) - 5, (int) ((this.maxY - i) * my) - 20, 10 - (int) (this.minX * mx) + 5, (int) ((this.maxY - i) * my) - 20);                String num = String.format("%.1f", new Object[]{Double.valueOf(i)});                g.drawString(num, 10 - (int) (this.minX * mx) - 25, (int) ((this.maxY - i) * my) - 15);            }        }        String num2 = String.valueOf(0);        g.drawString(num2, 15 + (int) ((0.0D - this.minX) * mx), (int) (this.maxY * my) - 5);    }    private void setSecondGraphic(Graphics g) {        this.minXText.setText("-8");        this.minYText.setText("-4.0");        this.maxXText.setText("8");        this.maxYText.setText("2.5");        this.stepXText.setText("0.1");        this.stepYText.setText("0.5");        paintSecondGraphic(g);    }    private void paintSecondGraphic(Graphics g) {        try {            this.minY = Double.parseDouble(this.minYText.getText());            this.minX = Double.parseDouble(this.minXText.getText());            this.maxX = Double.parseDouble(this.maxXText.getText());            this.maxY = Double.parseDouble(this.maxYText.getText());            this.stepX = Double.parseDouble(this.stepXText.getText());            this.stepY = Double.parseDouble(this.stepYText.getText());        } catch (NumberFormatException ex) {            JOptionPane.showMessageDialog(null, "���� ��������� ����������� ��� ������������ ������������� ����");            return;        }        if ((this.maxX <= this.minX) || (this.maxY <= this.minY)) {            JOptionPane.showMessageDialog(null, "�������� ��������� ������ �����������");            return;        }        double mx = (this.graphicPanel.getWidth() - 10) / (this.maxX - this.minX);        double my = (this.graphicPanel.getHeight() - 5) / (this.maxY - this.minY);        int smeshx = (int) (0.1D * this.graphicPanel.getWidth());        int smeshy = (int) (0.06D * this.graphicPanel.getHeight());        g.drawLine(10, (int) (this.maxY * my) - (smeshy + 2), this.graphicPanel.getWidth() - 5, (int) (this.maxY * my) - (smeshy + 2));        g.drawString(">", this.graphicPanel.getWidth() - 10, (int) (this.maxY * my) - (smeshy - 3));        g.drawString("X", this.graphicPanel.getWidth() - 10, (int) (this.maxY * my) - (smeshy + 5));        g.drawLine(smeshx - (int) (this.minX * mx), 0, smeshx - (int) (this.minX * mx), this.graphicPanel.getHeight() - 5);        g.drawString("^Y", smeshx - 2 - (int) (this.minX * mx), 8);        int xCol = (int) ((this.maxX - this.minX) / this.stepX);        int yCol = (int) ((this.maxY - this.minY) / this.stepY);        if (xCol <= 10) {            for (double i = this.minX; i < this.maxX; i += this.stepX) {                g.drawLine((int) (smeshx * 0.5D) + (int) ((i - this.minX) * mx), (int) (this.maxY * my) - (smeshy - 3), (int) (smeshx * 0.5D) + (int) ((i - this.minX) * mx), (int) (this.maxY * my) - (smeshy + 7));                String num = String.format("%.1f", new Object[]{Double.valueOf(i)});                if (i != 0.0D) {                    g.drawString(num, (int) (smeshx * 0.5D - 6.0D) + (int) ((i - this.minX) * mx), (int) (this.maxY * my) - (smeshy - 13));                }            }        }        double i;        if (xCol <= 20) {            double stepX1 = 2.0D * this.stepX;            for (double l = this.minX; l < this.maxX; l += stepX1) {                g.drawLine(smeshx + (int) ((l - this.minX) * mx), (int) (this.maxY * my) - (smeshy - 3), smeshx + (int) ((l - this.minX) * mx), (int) (this.maxY * my) - (smeshy + 7));                String num = String.format("%.1f", new Object[]{Double.valueOf(l)});                if (l != 0.0D) {                    g.drawString(num, smeshx - 6 + (int) ((l - this.minX) * mx), (int) (this.maxY * my) - (smeshy - 13));                }            }        } else {            double stepX1 = 10.0D * this.stepX;            for (i = this.minX; i < this.maxX; i += stepX1) {                g.drawLine(smeshx + (int) ((i - this.minX) * mx), (int) (this.maxY * my) - (smeshy - 3), smeshx + (int) ((i - this.minX) * mx), (int) (this.maxY * my) - (smeshy + 7));                String num = String.format("%.1f", new Object[]{Double.valueOf(i)});                if (i != 0.0D) {                    g.drawString(num, smeshx - 6 + (int) ((i - this.minX) * mx), (int) (this.maxY * my) - (smeshy - 13));                }            }        }        if (yCol <= 10) {            for (i = this.minY; i < this.maxY; i += this.stepY) {                if (i - 2.0D * this.stepY != 0.0D) {                    g.drawLine(smeshx - 2 - (int) (this.minX * mx) - 5, (int) ((this.maxY - i) * my) - 20, smeshx + 2 - (int) (this.minX * mx) + 5, (int) ((this.maxY - i) * my) - 20);                    String num = String.format("%.1f", new Object[]{Double.valueOf(i)});                    g.drawString(num, smeshx - 25 - (int) (this.minX * mx), (int) ((this.maxY - i) * my) - 15);                }            }        }        if (yCol <= 20) {            double stepY1 = 2.0D * this.stepY;            for (i = this.minY; i < this.maxY; i += stepY1) {                if (i != 0.0D) {                    g.drawLine(smeshx - 2 - (int) (this.minX * mx) - 5, (int) ((this.maxY - i) * my) - 20, smeshx + 2 - (int) (this.minX * mx) + 5, (int) ((this.maxY - i) * my) - 20);                    String num = String.format("%.1f", new Object[]{Double.valueOf(i)});                    g.drawString(num, smeshx - 25 - (int) (this.minX * mx), (int) ((this.maxY - i) * my) - 15);                }            }        } else {            double stepY1 = 3.0D * this.stepY;            for (i = this.minY; i < this.maxY; i += stepY1) {                if (i - 2.0D * stepY1 != 0.0D) {                    g.drawLine(smeshx - 7 - (int) (this.minX * mx), (int) ((this.maxY - i) * my) - smeshy, smeshx + 7 - (int) (this.minX * mx), (int) ((this.maxY - i) * my) - smeshy);                    String num = String.format("%.1f", new Object[]{Double.valueOf(i)});                    g.drawString(num, smeshx - 25 - (int) (this.minX * mx), (int) ((this.maxY - i) * my) - smeshy + 5);                }            }        }        g.drawString(String.valueOf(0), smeshx - 9 + (int) ((0.0D - this.minX) * mx), (int) (this.maxY * my) - (smeshy - 11));        double x = this.minX;        double y = Math.cos(x * 2.0D) * Math.exp(Math.sin(x));        int xgr = smeshx + (int) ((x - this.minX) * mx);        int ygr = (int) ((this.maxY - y) * my) - smeshy;        double y1 = 0.0D;        int x1gr = 0;        int y1gr = 0;        while (x < this.maxX) {            double x1 = x + this.stepX;            y1 = Math.cos(x * 2.0D) * Math.exp(Math.sin(x));            x1gr = smeshx + (int) ((x1 - this.minX) * mx);            y1gr = (int) ((this.maxY - y1) * my) - smeshy;            g.drawLine(xgr, ygr, x1gr, y1gr);            x = x1;            xgr = x1gr;            ygr = y1gr;        }    }    private void visible(boolean b) {        this.minXText.setVisible(b);        this.minYText.setVisible(b);        this.maxXText.setVisible(b);        this.maxYText.setVisible(b);        this.stepXText.setVisible(b);        this.stepYText.setVisible(b);        this.minXLabel.setVisible(b);        this.minYLabel.setVisible(b);        this.maxXLabel.setVisible(b);        this.maxYLabel.setVisible(b);        this.stepXLabel.setVisible(b);        this.stepYLabel.setVisible(b);        this.stepLabel.setVisible(b);        this.graphicButton.setVisible(b);        this.graphicPanel.setVisible(b);    }    private void initComponents() {        this.jLabel1 = new JLabel();        this.graphicComboBox = new JComboBox();        this.graphicPanel = new JPanel();        this.minXLabel = new JLabel();        this.minXText = new JTextField();        this.minYLabel = new JLabel();        this.minYText = new JTextField();        this.maxXLabel = new JLabel();        this.maxXText = new JTextField();        this.maxYLabel = new JLabel();        this.maxYText = new JTextField();        this.stepLabel = new JLabel();        this.stepXLabel = new JLabel();        this.stepXText = new JTextField();        this.stepYLabel = new JLabel();        this.stepYText = new JTextField();        this.graphicButton = new JButton();        setDefaultCloseOperation(3);        this.jLabel1.setFont(new Font("Times New Roman", 0, 18));        this.jLabel1.setHorizontalAlignment(11);        this.jLabel1.setText("�������:");        this.graphicComboBox.setFont(new Font("Times New Roman", 0, 14));        this.graphicComboBox.setModel(new DefaultComboBoxModel(new String[]{"�������� �������", "y = 4", "y = (cos(2*x))*exp(sin(x))"}));        this.graphicComboBox.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent evt) {                GraphicForm.this.graphicComboBoxActionPerformed(evt);            }        });        GroupLayout graphicPanelLayout = new GroupLayout(this.graphicPanel);        this.graphicPanel.setLayout(graphicPanelLayout);        graphicPanelLayout.setHorizontalGroup(graphicPanelLayout                .createParallelGroup(GroupLayout.Alignment.LEADING)                .addGap(0, 550, 32767));        graphicPanelLayout.setVerticalGroup(graphicPanelLayout                .createParallelGroup(GroupLayout.Alignment.LEADING)                .addGap(0, 600, 32767));        this.minXLabel.setFont(new Font("Times New Roman", 0, 18));        this.minXLabel.setHorizontalAlignment(11);        this.minXLabel.setText("minX");        this.minYLabel.setFont(new Font("Times New Roman", 0, 18));        this.minYLabel.setHorizontalAlignment(11);        this.minYLabel.setText("minY");        this.maxXLabel.setFont(new Font("Times New Roman", 0, 18));        this.maxXLabel.setHorizontalAlignment(11);        this.maxXLabel.setText("maxX");        this.maxYLabel.setFont(new Font("Times New Roman", 0, 18));        this.maxYLabel.setHorizontalAlignment(11);        this.maxYLabel.setText("maxY");        this.stepLabel.setFont(new Font("Times New Roman", 0, 18));        this.stepLabel.setHorizontalAlignment(0);        this.stepLabel.setText("��� �� ���:");        this.stepXLabel.setFont(new Font("Times New Roman", 0, 18));        this.stepXLabel.setHorizontalAlignment(11);        this.stepXLabel.setText("X");        this.stepYLabel.setFont(new Font("Times New Roman", 0, 18));        this.stepYLabel.setHorizontalAlignment(11);        this.stepYLabel.setText("Y");        this.graphicButton.setFont(new Font("Times New Roman", 0, 18));        this.graphicButton.setText("��������� ������");        this.graphicButton.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent evt) {                GraphicForm.this.graphicButtonActionPerformed(evt);            }        });        GroupLayout layout = new GroupLayout(getContentPane());        getContentPane().setLayout(layout);        layout.setHorizontalGroup(layout                .createParallelGroup(GroupLayout.Alignment.LEADING)                .addGroup(layout.createSequentialGroup()                        .addGap(27, 27, 27)                        .addComponent(this.graphicPanel, -1, -1, 32767)                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 58, 32767)                        .addComponent(this.graphicButton, -2, 245, -2)                        .addGap(22, 22, 22))                .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()                        .addContainerGap(-1, 32767)                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)                                .addGroup(GroupLayout.Alignment.TRAILING, layout.createParallelGroup(GroupLayout.Alignment.LEADING)                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()                                                .addComponent(this.minXLabel, -2, 64, -2)                                                .addGap(18, 18, 18)                                                .addComponent(this.minXText, -2, 114, -2)                                                .addGap(14, 14, 14))                                        .addGroup(layout.createSequentialGroup()                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)                                                        .addGroup(layout.createSequentialGroup()                                                                .addComponent(this.minYLabel, -2, 64, -2)                                                                .addGap(18, 18, 18)                                                                .addComponent(this.minYText, -2, 114, -2))                                                        .addGroup(layout.createSequentialGroup()                                                                .addComponent(this.maxXLabel, -2, 64, -2)                                                                .addGap(18, 18, 18)                                                                .addComponent(this.maxXText, -2, 114, -2))                                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)                                                                .addGroup(layout.createSequentialGroup()                                                                        .addComponent(this.stepXLabel, -2, 64, -2)                                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)                                                                        .addComponent(this.stepXText, -2, 114, -2))                                                                .addGroup(layout.createSequentialGroup()                                                                        .addComponent(this.maxYLabel, -2, 64, -2)                                                                        .addGap(18, 18, 18)                                                                        .addComponent(this.maxYText, -2, 114, -2))                                                                .addGroup(layout.createSequentialGroup()                                                                        .addComponent(this.stepYLabel, -2, 64, -2)                                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)                                                                        .addComponent(this.stepYText, -2, 114, -2))                                                                .addComponent(this.stepLabel, -2, 135, -2)))                                                .addGap(10, 10, 10)))                                .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()                                        .addComponent(this.jLabel1, -2, 96, -2)                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)                                        .addComponent(this.graphicComboBox, -2, -1, -2)                                        .addContainerGap()))));        layout.setVerticalGroup(layout                .createParallelGroup(GroupLayout.Alignment.LEADING)                .addGroup(layout.createSequentialGroup()                        .addGap(23, 23, 23)                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)                                .addComponent(this.graphicComboBox, -2, 28, -2)                                .addComponent(this.jLabel1, -2, 28, -2))                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)                                .addGroup(layout.createSequentialGroup()                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)                                                .addComponent(this.minXText, -2, 26, -2)                                                .addComponent(this.minXLabel, GroupLayout.Alignment.TRAILING, -2, 26, -2))                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)                                                .addComponent(this.minYLabel, -2, 24, -2)                                                .addComponent(this.minYText, -2, 24, -2))                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)                                                .addComponent(this.maxXLabel, -2, 24, -2)                                                .addComponent(this.maxXText, -2, 24, -2))                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)                                                .addComponent(this.maxYLabel, -2, 24, -2)                                                .addComponent(this.maxYText, -2, 24, -2))                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)                                        .addComponent(this.stepLabel, -2, 32, -2)                                        .addGap(18, 18, 18)                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)                                                .addComponent(this.stepXText, -2, 24, -2)                                                .addComponent(this.stepXLabel, -2, 24, -2))                                        .addGap(18, 18, 18)                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)                                                .addComponent(this.stepYText, -2, 24, -2)                                                .addComponent(this.stepYLabel, -2, 24, -2))                                        .addGap(136, 136, 136)                                        .addComponent(this.graphicButton))                                .addComponent(this.graphicPanel, -2, -1, -2))                        .addContainerGap(-1, 32767)));        pack();    }    private void graphicComboBoxActionPerformed(ActionEvent evt) {        switch (this.graphicComboBox.getSelectedIndex()) {            case 0:                visible(false);                break;            case 1:                visible(true);                Graphics g = this.graphicPanel.getGraphics();                this.graphicPanel.paint(g);                setFirstLines(g);                break;            case 2:                visible(true);                Graphics g2 = this.graphicPanel.getGraphics();                this.graphicPanel.paint(g2);                setSecondGraphic(g2);        }    }    private void graphicButtonActionPerformed(ActionEvent evt) {        Graphics g = this.graphicPanel.getGraphics();        switch (this.graphicComboBox.getSelectedIndex()) {            case 0:                this.graphicPanel.setVisible(false);                break;            case 1:                this.graphicPanel.paint(g);                paintFirstLines(g);                break;            case 2:                this.graphicPanel.paint(g);                paintSecondGraphic(g);        }    }    public static void main(String[] args) {        try {            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {                if ("Nimbus".equals(info.getName())) {                    UIManager.setLookAndFeel(info.getClassName());                    break;                }            }        } catch (ClassNotFoundException ex) {            Logger.getLogger(GraphicForm.class.getName()).log(Level.SEVERE, null, ex);        } catch (InstantiationException ex) {            Logger.getLogger(GraphicForm.class.getName()).log(Level.SEVERE, null, ex);        } catch (IllegalAccessException ex) {            Logger.getLogger(GraphicForm.class.getName()).log(Level.SEVERE, null, ex);        } catch (UnsupportedLookAndFeelException ex) {            Logger.getLogger(GraphicForm.class.getName()).log(Level.SEVERE, null, ex);        }        EventQueue.invokeLater(new Runnable() {            public void run() {                new GraphicForm().setVisible(true);            }        });    }}